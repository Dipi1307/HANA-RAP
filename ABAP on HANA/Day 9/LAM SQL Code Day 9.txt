1. Error code 288 - exception handling

alter procedure lamab_emp(in recs integer)
as begin

declare i integer;
declare empName varchar(40);
DECLARE EXIT HANDLER FOR SQL_ERROR_CODE 288
SELECT 'Dude, You are creating a duplicate table' from dummy;

empName := 'Anubhav';

--ddl (ideally we never use DDL in procedures)
create column table EMP( empid integer, empname varchar(30),
primary key(empid));

for i in 1..:recs do
insert into EMP values(:i, :empName || :i);
end for;

end

2. Generic error handling

alter procedure lamab_emp(in recs integer)
as begin

declare i integer;
declare empName varchar(40);
DECLARE EXIT HANDLER FOR sqlexception
	SELECT 'An internal error occurred' as msg,
		   ::SQL_ERROR_CODE AS ERR_CODE,
		   ::SQL_ERROR_MESSAGE AS ERR_MSG
	 from dummy;

empName := 'Anubhav';

--ddl (ideally we never use DDL in procedures)
create column table EMP( empid integer, empname varchar(30),
primary key(empid));

for i in 1..:recs do
	insert into EMP values(:i, :empName || :i);
end for;

end

3. Example of simple array in SQLScript

create procedure lam_array(out val varchar(20))
as begin

declare arr tinyint array = array(3,2,1);
declare fruits varchar(20) array = array('Apple','Cherry','Banana');

val := :fruits[:arr[3]];


end

4. Basic Cursors 

procedure lam_cursor(out pid varchar(20), out pid2 varchar(20))
default schema saphanadb
as begin

--declare
declare cursor c1 for select product_id from snwd_pd;
--open
open c1;
--fetch
fetch c1 into pid;
--fetch
fetch c1 into pid2;
--close
close c1;


end

5. Cursor with parameter & Dynamic Cursor with loop

create procedure lam_pcursor(in category varchar(20),out pid varchar(20), out pid2 varchar(20))
default schema saphanadb
as begin

declare arr_pid varchar(20) array;
--declare
declare cursor c1(icat varchar(20))
 for select product_id from snwd_pd where category = :icat;
 
--dynamic fetch - FOR
for wa as c1(category) do
	arr_pid[c1::rowcount] = wa.product_id;
end for;

pid := :arr_pid[1];
pid2 := :arr_pid[2];

end

call lam_pcursor('Mice',?,?)

6. Arry to table

create procedure lam_ptcursor(in category varchar(20),
out etab table(product_id varchar(20)))
default schema saphanadb
as begin

declare arr_pid varchar(20) array;
--declare
declare cursor c1(icat varchar(20))
 for select product_id from snwd_pd where category = :icat;
 
--dynamic fetch - FOR
for wa as c1(category) do
	arr_pid[c1::rowcount] = wa.product_id;
end for;

etab = unnest(:arr_pid) as (product_id);

end

7. Explicit table

create procedure lam_simpletab(out etab table(product_id varchar(20),
								              price decimal(10,2)))
default schema saphanadb
as begin

--explicit table
etab = select product_id, price from snwd_pd;

end

8. Code push down with itab


create procedure lam_loopatitab(in tax integer,
								out etab table(product_id varchar(20),
								              price decimal(10,2),
											  mrp decimal(10,2)
								              ))
default schema saphanadb
as begin

declare i, rec_count integer;
declare lv_mrp decimal(10,2);

--implicit table
lt_product = select product_id, price from snwd_pd;

rec_count = record_count(:lt_product);

for i in 1..:rec_count do

lv_mrp = :lt_product.price[i] * (100 + tax) / 100;
:etab.insert((
				:lt_product.product_id[i],
				:lt_product.price[i],
				lv_mrp
				),i);

end for;


end

9. UDF - scalar

create function lam_calcarea(radius integer)
returns area decimal(5,2)
as begin

area = 3.14 * radius * radius;


end

CALLING UDF - select lam_calcarea(5) from dummy

10. UDF - Table

create function lam_getSuppliers()
returns table(bp_id varchar(40), company_name varchar(80))
default schema saphanadb
as begin

return select bp_id, company_name from snwd_bpa;

end

CALLING - select * from lam_getSuppliers()

11. OIA Scenario

create procedure lam_get_oia(out et_oia table(
									bp_id varchar(20),
									company_name varchar(40),
									open_days integer,
									gross_amount decimal(15,2),
									currency_code varchar(4),
									tagging varchar(1)
))
default schema saphanadb
as begin

declare lv_client varchar(3);
declare lv_target_curr varchar(4);
declare lv_max_amount decimal(10,2);
declare lv_open_days integer;
declare lv_today date;

--get the cusomizing table data
select current_date into lv_today from dummy;

select mandt, max_open_days, max_amount, currency_code into
		lv_client, lv_open_days, lv_max_amount, lv_target_curr from zdp_cust
		where usrid = ( select Ucase(session_context('APPLICATIONUSER' )) from dummy );
		
--get avg open days for open invoices
lt_days = select floor(seconds_between(to_timestamp(left(changed_at, 14), 'YYYYMMDDHHMISS'),
							 to_timestamp(localtoutc(now(), 'CET')))) / (24 * 60 * 60) as open_days,
		   buyer_guid from snwd_so_inv_head where payment_status = '';
	   
lt_open_days = select company_name, bp_id, avg(open_days) as open_days
				from :lt_days as t0 inner join snwd_bpa as t1 on 
				 t0.buyer_guid = t1.node_key group by company_name, bp_id;

--get the amount which is open
lt_amount = select bpa.bp_id, sum(itm.gross_amount) as gross_amount, itm.currency_code
				from snwd_so_inv_item as itm inner join snwd_so_inv_head as head
				on itm.parent_key = head.node_key 
				inner join snwd_bpa as bpa on
				head.buyer_guid = bpa.node_key
				where head.payment_status = ''
				group by bpa.bp_id, itm.currency_code;

--currency conversion
lt_amount_conv = CE_CONVERSION(:lt_amount, [
												family = 'currency',
												method = 'ERP',
												steps  = 'shift, convert, shift_back',
												target_unit = :lv_target_curr,
												client = :lv_client,
												source_unit_column = 'CURRENCY_CODE',
												reference_date = :lv_today,
												output_unit_column = 'CONV_CURR_CODE'
											] , [gross_amount]);
--tagging
lt_gross_amount = select bp_id, sum(gross_amount) as gross_amount,
							    CONV_CURR_CODE as currency_code from :lt_amount_conv
							    group by bp_id, conv_curr_code;
--return data
et_oia = select odays.bp_id, odays.company_name, odays.open_days, 
			amt.gross_amount as gross_amount,
			amt.currency_code as currency_code, 
			case when odays.open_days > :lv_open_days and amt.gross_amount > :lv_max_amount
				then 'X' 
				else '' 
				end	as tagging 
			from :lt_gross_amount as amt
			inner join :lt_open_days as odays on 
			amt.bp_id = odays.bp_id
			;


end

